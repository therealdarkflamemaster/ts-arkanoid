{"version":3,"sources":["view/CanvasView.ts","index.ts"],"names":[],"mappings":"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","file":"src.77de5100.js","sourceRoot":"..\\src","sourcesContent":["// Types\r\nimport {Brick} from '../sprites/Brick';\r\nimport {Ball} from '../sprites/Ball';\r\nimport {Paddle} from '../sprites/Paddle';\r\nimport { BRICK_IMAGES } from '~/setup';\r\n\r\nexport class CanvasView {\r\n\r\n    canvas : HTMLCanvasElement;\r\n    private context : CanvasRenderingContext2D | null;\r\n    private socreDisplay : HTMLObjectElement | null;\r\n    private start : HTMLObjectElement | null;\r\n    private info : HTMLObjectElement | null;\r\n\r\n    constructor(canvasName : string) {\r\n        this.canvas = document.querySelector(canvasName) as HTMLCanvasElement; \r\n        this.context = this.canvas.getContext('2d');\r\n        this.socreDisplay = document.querySelector('#score');\r\n        this.start = document.querySelector('#start');\r\n        this.info = document.querySelector('#info');\r\n    } \r\n\r\n\r\n    clear(): void {\r\n        this.context?.clearRect(0,0,this.canvas.width,this.canvas.height);\r\n    }\r\n\r\n    initStartButton( startFunction : (view:CanvasView) => void ) : void {\r\n        this.start?.addEventListener('click', ()=>startFunction(this));\r\n    }\r\n\r\n    drawSocre(score : number) : void {\r\n        if (this.socreDisplay) this.socreDisplay.innerHTML = score.toString();\r\n    }\r\n\r\n    drawInfo(text : string) : void {\r\n        if (this.info) this.info.innerHTML = text;\r\n    }\r\n\r\n    drawSprite(brick : Brick) : void {\r\n        if (!brick) return;\r\n        \r\n        this.context?.drawImage(\r\n            brick.image,\r\n            brick.pos.x,\r\n            brick.pos.y,\r\n            brick.width,\r\n            brick.height\r\n        );\r\n    }\r\n\r\n    drawBricks(bricks : Brick[]) : void {\r\n        bricks.forEach(brick => {\r\n            this.drawSprite(brick);\r\n        });\r\n    }\r\n\r\n}","import {CanvasView} from './view/CanvasView';\r\nimport {Ball} from './sprites/Ball';\r\nimport {Brick} from './sprites/Brick';\r\nimport {Paddle} from './sprites/Paddle';\r\n// Images\r\nimport PADDLE_IMAGE from './images/paddle.png';\r\nimport BALL_IMAGE from './images/ball.png';\r\n// Level and Colors\r\nimport {\r\n    PADDLE_SPEED,\r\n    PADDLE_WIDTH,\r\n    PADDLE_HEIGHT,\r\n    PADDLE_STARTX,\r\n    BALL_SPEED,\r\n    BALL_SIZE,\r\n    BALL_STARTX,\r\n    BALL_STARTY\r\n} from './setup';\r\n\r\nlet gameOver = false;\r\nlet score = 0;\r\n\r\nfunction setGameOver(view : CanvasView) {\r\n    view.drawInfo('Game Over !')\r\n    gameOver = false;\r\n}\r\n\r\nfunction setGameWin(view : CanvasView) {\r\n    view.drawInfo('Game Won !');\r\n    gameOver = false;\r\n}\r\n\r\nfunction gameLoop (view : CanvasView, bricks: Brick[], paddle : Paddle, ball : Ball) {\r\n\r\n}\r\n\r\nfunction startGame ( view : CanvasView) {}\r\n\r\n// Create a new view\r\nconst view = new CanvasView('#playField');\r\nview.initStartButton(startGame);\r\n"]}